dependecy = compile 'com.mcxiaoke.volley:library-aar:1.0.0'
public static void getResponse(final Context context, String method, final Map<String, String> params, boolean progress, final VolleyCallback callback) {

        final Dialog dialog;
        dialog = new Dialog(context);
      //  Log.e("Method :>>>>>", method);

        if (progress) {
            if (dialog!=null && !dialog.isShowing())
            {
                dialog.setCancelable(false);
                dialog.show();
            }
        }
        StringRequest stringRequest = new StringRequest(Request.Method.POST, WebServiceURL + method, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
               // Log.e("response>>>", response);
                if (dialog!=null && dialog.isShowing())
                    dialog.dismiss();
                if (response.startsWith("{"))
                {
                    if(response.contains("ERR003"))
                    {
                        User_Status model = new User_Status().User_Status(response);
                        AlertDialog.Builder builder1 = new AlertDialog.Builder(context);
                        builder1.setTitle(R.string.app_name);
                        builder1.setIcon(R.mipmap.app_icon);
                        builder1.setMessage(model.response.msg);
                        builder1.setCancelable(false);
                        builder1.setPositiveButton("Log Out", new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int id) {
                                LoginManager.getInstance().logOut();
                                CommonUtilities.RemoveALlPreference(context);
                                if(CommonUtilities.getPreference(context,CommonUtilities.pref_UserId).equals(""))
                                {
                                    Intent intent = new Intent(context,SignupLogin.class);
                                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    context.startActivity(intent);
                                    ((Activity)context).finish();
                                }
                                else
                                {
                                    logout(context);
                                }
                            }
                        });
                        AlertDialog alert11 = builder1.create();
                        alert11.show();
                    }
                    else
                        callback.onSuccess(response.toString());
                }
                else
                {
                    callback.onError("error");
                    CommonUtilities.alertdialog(context, "Something went wrong. Please try again");
                }
            }
        },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        dialog.dismiss();
                        AlertDialog.Builder builder1 = new AlertDialog.Builder(context);
                        builder1.setTitle(R.string.app_name);
                        builder1.setIcon(R.mipmap.app_icon);
                        builder1.setMessage("Something went wrong. Please try again");
                        builder1.setCancelable(false);
                        builder1.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int id) {
                                dialog.dismiss();
                            }
                        });
                        AlertDialog alert11 = builder1.create();
                        alert11.show();
                    }
                }) {
            @Override
            protected Map<String, String> getParams() throws AuthFailureError {
                params.put(CommonUtilities.key_udid, getDeviceId(context));
                params.put(CommonUtilities.key_security_toekn, CommonUtilities.getSecurity_Preference(context, CommonUtilities.key_security_toekn));
                params.put(CommonUtilities.key_device_type, "2");
                params.put(CommonUtilities.key_app_version, BuildConfig.VERSION_NAME);
                params.put(CommonUtilities.key_pushnotification_toekn, CommonUtilities.getPreference(context,CommonUtilities.pref_push_token));
              //  Log.e("params>>>", params.toString());
                return params;
            }
        };
        call_webService(context, stringRequest, dialog);
    }


    public static void logout(final Context context) {

        Map<String, String> params = new HashMap<String, String>();
        params.put(CommonUtilities.key_user_id, CommonUtilities.getPreference(context,CommonUtilities.pref_UserId));
        ServerAccess.getResponse(context, "logout", params, true, new VolleyCallback() {
            @Override
            public void onSuccess(String result) {
                Logout_Model logmodel = new Logout_Model().Logout_Model(result);
                if (logmodel != null) {
                    if (logmodel.response.status.equals(CommonUtilities.key_Success)) {

                        if(logmodel.response.user_logout.token!=null)
                            CommonUtilities.setSecurity_Preference(context,CommonUtilities.key_security_toekn, logmodel.response.user_logout.token);

                        LoginManager.getInstance().logOut();
                        CommonUtilities.RemoveALlPreference(context);
                        Intent intent = new Intent(context,SignupLogin.class);
                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                        context.startActivity(intent);
                        ((Activity)context).finish();
                    } else {
                        CommonUtilities.ShowToast(context,logmodel.response.msg);
                    }
                }
            }

            @Override
            public void onError(String error) {

            }
        });
    }

    public static void call_webService(final Context context, final StringRequest stringRequest, final Dialog dialog) {
        int socketTimeout = 20000;//20 seconds - change to what you want
        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);

        if (CommonUtilities.isConnectingToInternet(context)) {
            RequestQueue requestQueue = Volley.newRequestQueue(context);
            stringRequest.setRetryPolicy(policy);
            requestQueue.add(stringRequest);
        } else {
            if (dialog.isShowing())
                dialog.dismiss();
            final Dialog int_dialog = new Dialog(context);
            int_dialog.setContentView(R.layout.no_internet_img);
            Button text = (Button) int_dialog.findViewById(R.id.btn_ok);
            TextView txt = (TextView) int_dialog.findViewById(R.id.text);
            // if button is clicked, close the custom dialog
            Animation anim = new AlphaAnimation(0.0f, 1.0f);
            anim.setDuration(1000); //You can manage the blinking time with this parameter
            anim.setStartOffset(100);
            anim.setRepeatMode(Animation.REVERSE);
            anim.setRepeatCount(Animation.INFINITE);
            txt.startAnimation(anim);

            text.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    int_dialog.dismiss();
                    call_webService(context, stringRequest, dialog);
                }
            });

            int_dialog.show();
        }
    }

    public interface VolleyCallback {
        void onSuccess(String result);

        void onError(String error);

    }
